{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"me",
				"message_gagne"
			],
			[
				"nb_",
				"nb_max"
			],
			[
				"affi",
				"afficher_coup"
			],
			[
				"ti",
				"tirer_couleur"
			],
			[
				"so",
				"somme_produit_egaux"
			],
			[
				"test_",
				"test_legendre"
			],
			[
				"es",
				"est_premier"
			],
			[
				"cons",
				"constexpr	(population.cpp)"
			],
			[
				"pop",
				"pop"
			],
			[
				"po",
				"population_initiale"
			],
			[
				"ann",
				"annee_depart"
			],
			[
				"ios",
				"iostream"
			],
			[
				"ou",
				"out	(README.md)"
			],
			[
				"u",
				"use	(Main.cpp)"
			],
			[
				"us",
				"using	(README.md)"
			],
			[
				"n",
				"nb1"
			],
			[
				"sec",
				"seconde"
			],
			[
				"qua",
				"quantite"
			],
			[
				"nb",
				"nb1"
			],
			[
				"mai",
				"main	main()"
			],
			[
				"strF",
				"strFragmentFile"
			],
			[
				"SCR",
				"SCREEN_HEIGHT"
			],
			[
				"SDL",
				"SDL2"
			],
			[
				"inc",
				"inc	#include \"…\""
			],
			[
				"gRenderQ",
				"gRenderQuad	(51_SDL_and_modern_opengl.cpp)"
			],
			[
				"print",
				"printf	printf …"
			],
			[
				"curr",
				"currentKeyStates"
			],
			[
				"ke",
				"key"
			],
			[
				"k",
				"keysym"
			],
			[
				"S",
				"SDL_KEYDOWN"
			],
			[
				"SDLK",
				"SDLK_ESCAPE"
			],
			[
				"brier",
				"briere"
			],
			[
				"STATIC_",
				"STATIC_ROOT"
			],
			[
				"ref",
				"reference"
			],
			[
				"im",
				"img	Tag"
			],
			[
				"padd",
				"padding-bottom"
			],
			[
				"max",
				"max-height"
			],
			[
				"pre",
				"presentation"
			],
			[
				"font-",
				"font-weight"
			],
			[
				"pad",
				"padding-right"
			],
			[
				"min",
				"min-height"
			],
			[
				"fon",
				"font-size"
			],
			[
				"mis",
				"missionParticuliere"
			],
			[
				"LIS",
				"list_filter"
			],
			[
				"lis",
				"list"
			],
			[
				"Refe",
				"Reference"
			],
			[
				"Ima",
				"ImageField"
			],
			[
				"model",
				"models"
			],
			[
				"c",
				"class	Attr"
			],
			[
				"tele",
				"telechargements"
			],
			[
				"Mod",
				"ModelForm	ModelForm"
			],
			[
				"def",
				"def"
			],
			[
				"fo",
				"forms"
			],
			[
				"tel",
				"telechargements"
			],
			[
				"bor",
				"border"
			],
			[
				"margi",
				"margin-top"
			],
			[
				"marg",
				"margin-bottom"
			],
			[
				"paddi",
				"padding"
			],
			[
				"Med",
				"MEDIA_ROOT"
			],
			[
				"upl",
				"upload_to"
			],
			[
				"MED",
				"MEDIA_URL"
			],
			[
				"Pers",
				"Personne"
			],
			[
				"Cate",
				"CategoriesAdmin"
			],
			[
				"bri",
				"briere"
			],
			[
				"Car",
				"CategoriesAdmin"
			],
			[
				"Model",
				"Model	Model"
			],
			[
				"mode",
				"models"
			],
			[
				"pa",
				"padding-left"
			],
			[
				"Mis",
				"MissionParticuliere"
			],
			[
				"filter",
				"filtre"
			],
			[
				"Mi",
				"MissionParticuliere"
			],
			[
				"Mode",
				"Model"
			],
			[
				"fil",
				"filter"
			],
			[
				"refe",
				"references"
			],
			[
				"Typ",
				"TypeTravaux"
			],
			[
				"margin",
				"margin-bottom"
			],
			[
				"typ",
				"typeTravaux"
			],
			[
				"Ty",
				"TypeTravaux"
			],
			[
				"type",
				"typeBatiment"
			],
			[
				"sous",
				"sousCategorie"
			],
			[
				"refer",
				"references_arg"
			],
			[
				"a",
				"a	Tag"
			],
			[
				"htm",
				"html"
			],
			[
				"sousC",
				"sousCategorie"
			],
			[
				"sou",
				"sousCategorie"
			],
			[
				"cate",
				"categorie"
			],
			[
				"Sou",
				"SousCategorieAdmin"
			],
			[
				"mar",
				"margin-left"
			],
			[
				"abs",
				"absolute"
			],
			[
				"back",
				"background-color"
			],
			[
				"re",
				"request"
			],
			[
				"bo",
				"border"
			],
			[
				"ri",
				"right"
			],
			[
				"inline",
				"inline-table"
			],
			[
				"ins",
				"insertfile"
			],
			[
				"mix",
				"moxiemanager"
			],
			[
				"id_",
				"id_contenu"
			],
			[
				"chan",
				"change_form"
			],
			[
				"chang",
				"change_form_template"
			],
			[
				"mo",
				"models"
			],
			[
				"sit",
				"site_web"
			],
			[
				"Ch",
				"CharField"
			],
			[
				"Sous",
				"Sous-Catégorie"
			],
			[
				"site",
				"site"
			],
			[
				"For",
				"ForeignKey"
			],
			[
				"head",
				"header"
			],
			[
				"bord",
				"border-radius"
			],
			[
				"paddin",
				"padding-top"
			],
			[
				"inlin",
				"inline-block"
			],
			[
				"p",
				"p	Tag"
			],
			[
				"conta",
				"container"
			],
			[
				"ar",
				"article	Tag"
			],
			[
				"pr",
				"presentation"
			],
			[
				"san",
				"sans-serif"
			],
			[
				"dom",
				"domaine"
			],
			[
				"ma",
				"margin-left"
			],
			[
				"text",
				"text-decoration"
			],
			[
				"box",
				"box-shadow"
			],
			[
				"rel",
				"relative"
			],
			[
				"i",
				"id	Attr"
			],
			[
				"back-c",
				"background-clip"
			],
			[
				"padi",
				"padding-top"
			],
			[
				"sha",
				"box-shadow"
			],
			[
				"ba",
				"bae8ba"
			],
			[
				"wid",
				"width"
			],
			[
				"wi",
				"width"
			],
			[
				"list",
				"list-style-type"
			],
			[
				"text-",
				"text-align"
			]
		]
	},
	"buffers":
	[
		{
			"file": "sources/Main.cpp",
			"settings":
			{
				"buffer_size": 3772,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "// Link statically with GLEW\n#define GLEW_STATIC\n\n// Headers\n#include <GL/glew.h>\n#include <SFML/Window.hpp>\n#include <iostream>\n\n// Shader sources\nconst GLchar* vertexSource =\n    \"#version 150 core\\n\"\n    \"in vec2 position;\"\n    \"in vec3 color;\"\n    \"out vec3 Color;\"\n    \"void main() {\"\n    \"   Color = color;\"\n    \"   gl_Position = vec4(position, 0.0, 1.0);\"\n    \"}\";\nconst GLchar* fragmentSource =\n    \"#version 150 core\\n\"\n    \"in vec3 Color;\"\n    \"out vec4 outColor;\"\n    \"void main() {\"\n    \"   outColor = vec4(Color, 1.0);\"\n    \"}\";\n\nint main()\n{\n    sf::ContextSettings settings;\n    settings.depthBits = 24;\n    settings.stencilBits = 8;\n\n    sf::Window window(sf::VideoMode(800, 600, 32), \"OpenGL\", sf::Style::Titlebar | sf::Style::Close, settings);\n\n    // Initialize GLEW\n    glewExperimental = GL_TRUE;\n    glewInit();\n\n    // Create Vertex Array Object\n    GLuint vao;\n    glGenVertexArrays(1, &vao);\n    glBindVertexArray(vao);\n\n    // Create a Vertex Buffer Object and copy the vertex data to it\n    GLuint vbo;\n    glGenBuffers(1, &vbo);\n\n    GLfloat vertices[] = {\n         0.0f,  0.5f, 1.0f, 0.0f, 0.0f,\n         0.5f, -0.5f, 0.0f, 1.0f, 0.0f,\n        -0.5f, -0.5f, 0.0f, 0.0f, 1.0f\n    };\n\n    glBindBuffer(GL_ARRAY_BUFFER, vbo);\n    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n\n    // Create and compile the vertex shader\n    GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);\n    glShaderSource(vertexShader, 1, &vertexSource, NULL);\n    glCompileShader(vertexShader);\n\n    // Create and compile the fragment shader\n    GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);\n    glShaderSource(fragmentShader, 1, &fragmentSource, NULL);\n    glCompileShader(fragmentShader);\n\n    // Link the vertex and fragment shader into a shader program\n    GLuint shaderProgram = glCreateProgram();\n    glAttachShader(shaderProgram, vertexShader);\n    glAttachShader(shaderProgram, fragmentShader);\n    glBindFragDataLocation(shaderProgram, 0, \"outColor\");\n    glLinkProgram(shaderProgram);\n    glUseProgram(shaderProgram);\n\n    // Specify the layout of the vertex data\n    GLint posAttrib = glGetAttribLocation(shaderProgram, \"position\");\n    glEnableVertexAttribArray(posAttrib);\n    glVertexAttribPointer(posAttrib, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(GLfloat), 0);\n\n    GLint colAttrib = glGetAttribLocation(shaderProgram, \"color\");\n    glEnableVertexAttribArray(colAttrib);\n    glVertexAttribPointer(colAttrib, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(GLfloat), (void*)(2 * sizeof(GLfloat)));\n\n    while (window.isOpen())\n    {\n        sf::Event windowEvent;\n        while (window.pollEvent(windowEvent))\n        {\n            switch (windowEvent.type)\n            {\n            case sf::Event::Closed:\n                window.close();\n                break;\n            }\n        }\n\n        // Clear the screen to black\n        glClearColor(0.0f, 0.0f, 0.0f, 1.0f);\n        glClear(GL_COLOR_BUFFER_BIT);\n\n        // Draw a triangle from the 3 vertices\n        glDrawArrays(GL_TRIANGLES, 0, 3);\n\n        // Swap buffers\n        window.display();\n    }\n\n    glDeleteProgram(shaderProgram);\n    glDeleteShader(fragmentShader);\n    glDeleteShader(vertexShader);\n\n    glDeleteBuffers(1, &vbo);\n\n    glDeleteVertexArrays(1, &vao);\n}",
			"settings":
			{
				"buffer_size": 3274,
				"line_ending": "Unix",
				"name": "// Link statically with GLEW"
			}
		},
		{
			"contents": "//////////////////////////////////////////////////////////////////////////////\n//\n//  --- LoadShaders.cxx ---\n//\n//////////////////////////////////////////////////////////////////////////////\n\n#include <cstdlib>\n#include <iostream>\n\n#define GLEW_STATIC\n#include <GL/glew.h>\n#include \"LoadShaders.h\"\n\n//----------------------------------------------------------------------------\n\nstatic const GLchar*\nReadShader( const char* filename )\n{\n#ifdef WIN32\n	FILE* infile;\n	fopen_s( &infile, filename, \"rb\" );\n#else\n    FILE* infile = fopen( filename, \"rb\" );\n#endif // WIN32\n\n    if ( !infile ) {\n#ifdef _DEBUG\n        std::cerr << \"Unable to open file '\" << filename << \"'\" << std::endl;\n#endif /* DEBUG */\n        return NULL;\n    }\n\n    fseek( infile, 0, SEEK_END );\n    int len = ftell( infile );\n    fseek( infile, 0, SEEK_SET );\n\n    GLchar* source = new GLchar[len+1];\n\n    fread( source, 1, len, infile );\n    fclose( infile );\n\n    source[len] = 0;\n\n    return const_cast<const GLchar*>(source);\n}\n\n//----------------------------------------------------------------------------\n\nGLuint\nLoadShaders( ShaderInfo* shaders )\n{\n    if ( shaders == NULL ) { return 0; }\n\n    GLuint program = glCreateProgram();\n\n    ShaderInfo* entry = shaders;\n    while ( entry->type != GL_NONE ) {\n        GLuint shader = glCreateShader( entry->type );\n\n        entry->shader = shader;\n\n        const GLchar* source = ReadShader( entry->filename );\n        if ( source == NULL ) {\n            for ( entry = shaders; entry->type != GL_NONE; ++entry ) {\n                glDeleteShader( entry->shader );\n                entry->shader = 0;\n            }\n\n            return 0;\n        }\n\n        glShaderSource( shader, 1, &source, NULL );\n        delete [] source;\n\n        glCompileShader( shader );\n\n        GLint compiled;\n        glGetShaderiv( shader, GL_COMPILE_STATUS, &compiled );\n        if ( !compiled ) {\n#ifdef _DEBUG\n            GLsizei len;\n            glGetShaderiv( shader, GL_INFO_LOG_LENGTH, &len );\n\n            GLchar* log = new GLchar[len+1];\n            glGetShaderInfoLog( shader, len, &len, log );\n            std::cerr << \"Shader compilation failed: \" << log << std::endl;\n            delete [] log;\n#endif /* DEBUG */\n\n            return 0;\n        }\n\n        glAttachShader( program, shader );\n        \n        ++entry;\n    }\n\n#ifdef GL_VERSION_4_1\n    if ( GLEW_VERSION_4_1 ) {\n        // glProgramParameteri( program, GL_PROGRAM_SEPARABLE, GL_TRUE );\n    }\n#endif /* GL_VERSION_4_1 */\n    \n    glLinkProgram( program );\n\n    GLint linked;\n    glGetProgramiv( program, GL_LINK_STATUS, &linked );\n    if ( !linked ) {\n#ifdef _DEBUG\n        GLsizei len;\n        glGetProgramiv( program, GL_INFO_LOG_LENGTH, &len );\n\n        GLchar* log = new GLchar[len+1];\n        glGetProgramInfoLog( program, len, &len, log );\n        std::cerr << \"Shader linking failed: \" << log << std::endl;\n        delete [] log;\n#endif /* DEBUG */\n\n        for ( entry = shaders; entry->type != GL_NONE; ++entry ) {\n            glDeleteShader( entry->shader );\n            entry->shader = 0;\n        }\n        \n        return 0;\n    }\n\n    return program;\n}\n\n//----------------------------------------------------------------------------\n",
			"file": "/home/pierre/.cache/.fr-fffAcc/redbook_chapter_03_drawcommands/LoadShaders.cpp",
			"file_size": 3219,
			"file_write_time": 130507236220000000,
			"settings":
			{
				"buffer_size": 3219,
				"line_ending": "Unix"
			}
		},
		{
			"file": "headers/Main.h",
			"settings":
			{
				"buffer_size": 286,
				"line_ending": "Unix"
			}
		},
		{
			"file": "sources/makefile",
			"settings":
			{
				"buffer_size": 467,
				"line_ending": "Unix"
			}
		},
		{
			"file": "shaders/shader.vertex",
			"settings":
			{
				"buffer_size": 129,
				"line_ending": "Unix",
				"name": "#version 150"
			}
		},
		{
			"file": "shaders/shader.fragment",
			"settings":
			{
				"buffer_size": 103,
				"line_ending": "Unix",
				"name": "#version 150"
			}
		}
	],
	"build_system": "Packages/User/SDL.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/C++ Starting Kit/C++ - Starting Kit.sublime-build",
					""
				],
				[
					"Packages/C++ Starting Kit/C++ - Starting Kit.sublime-build",
					"Run"
				],
				[
					"Packages/User/SDL.sublime-build",
					""
				]
			],
			[
				"Packages/User/SDL.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "rei",
		"selected_items":
		[
			[
				"rei",
				"Indentation: Reindent Lines"
			],
			[
				"re",
				"Indentation: Reindent Lines"
			],
			[
				"men",
				"View: Toggle Menu"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"contr",
				"Package Control: Install Package"
			],
			[
				"lint",
				"SublimeLinter: Enable Debug Mode"
			],
			[
				"lin",
				"SublimeLinter: Lint This View"
			],
			[
				"disb",
				"Package Control: Disable Package"
			],
			[
				"ena",
				"Package Control: Enable Package"
			],
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"enabl",
				"Package Control: Enable Package"
			],
			[
				"disco",
				"Package Control: Discover Packages"
			],
			[
				"",
				"Package Control: Enable Package"
			],
			[
				"menu",
				"View: Toggle Menu"
			],
			[
				"Snippet: ",
				"Snippet: Lorem ipsum"
			],
			[
				"inde",
				"Indentation: Reindent Lines"
			],
			[
				"inden",
				"Indentation: Convert to Tabs"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: List Packages"
			],
			[
				"ind",
				"Indentation: Reindent Lines"
			],
			[
				"rein",
				"Indentation: Reindent Lines"
			],
			[
				"packag",
				"Preferences: Browse Packages"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"me",
				"View: Toggle Menu"
			],
			[
				"packa",
				"PackageResourceViewer: Open Resource"
			],
			[
				"pl",
				"Set Syntax: Plain Text"
			],
			[
				"pyth",
				"Set Syntax: Regular Expressions (Python)"
			],
			[
				"set",
				"Set Syntax: JavaScript"
			],
			[
				"plai",
				"Set Syntax: Plain Text"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"late",
				"Set Syntax: LaTeX"
			],
			[
				"stat",
				"View: Toggle Status Bar"
			],
			[
				"package",
				"Package Control: Install Package"
			]
		],
		"width": 467.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"ls",
			"sudo pip install cpplint",
			"pip install cpplint",
			"help",
			"g++ 01_hello_SDL.cpp -w -lSDL2 -o 01_hello_SDL",
			"ls",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/pierre/Desktop/4D",
		"/home/pierre/Desktop/4D/headers",
		"/home/pierre/Desktop/4D/shaders",
		"/home/pierre/Desktop/4D/sources"
	],
	"file_history":
	[
		"/home/pierre/Desktop/test.cpp",
		"/home/pierre/Desktop/4D/sources/Main.cpp"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			";\n",
			"gRender",
			"gRenderQ",
			"gRender",
			"else",
			" )",
			"( ",
			"	{",
			"	}",
			"//",
			"else",
			"void",
			" )",
			"( ",
			"//",
			"}",
			"	{",
			"glew",
			"{",
			"//",
			"if(",
			"else",
			" ]",
			"[ ",
			" )",
			"( ",
			"	{",
			"{",
			"show",
			"else",
			"{",
			"//",
			" )",
			"( ",
			"	{",
			"KeyPressS",
			" ]",
			"[ ",
			"else",
			"//",
			" )",
			"( ",
			"{",
			"	{",
			"//",
			"else",
			" )",
			"( ",
			"{",
			"	{",
			"else",
			"//",
			" )",
			"( ",
			"{",
			"	{",
			"()",
			"else",
			"//",
			"	{",
			" )",
			"( ",
			"else",
			"{",
			" )",
			"( ",
			"{",
			"//",
			"KEY_PRESS_SURFACE_DEFAULT",
			"KEY_PRESS_SURFACE_TOTAL",
			" )",
			"( ",
			"{",
			"//",
			")\n",
			"range",
			"load-module module-alsa-sink",
			"reference",
			"			<",
			">\n",
			"hover",
			"font-size",
			"fallback",
			"radi",
			"radiius",
			"categorie_",
			"top",
			"}",
			"{",
			";",
			"}",
			"{",
			";",
			"}",
			"{",
			"src",
			"filepicker",
			";",
			"}",
			"{",
			";",
			",",
			"}",
			"{",
			",",
			"'django.contrib.sessions.middleware.SessionMiddleware',",
			"<div>",
			"<br>",
			"div class=\"title",
			"1957",
			"<p",
			"p>",
			"p",
			";\n",
			"print",
			"backg",
			"conky_",
			"0.45",
			"radius=85",
			"y=280",
			"x=120",
			";\n",
			"enp3s0f0",
			"wlp4s0",
			"max",
			"r_",
			"rate"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "/home/pierre/Desktop/4D"
		}
	],
	"groups":
	[
		{
			"selected": 14,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "sources/Main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3772,
						"regions":
						{
						},
						"selection":
						[
							[
								3580,
								3592
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3274,
						"regions":
						{
						},
						"selection":
						[
							[
								245,
								245
							]
						],
						"settings":
						{
							"auto_name": "// Link statically with GLEW",
							"default_dir": "/home/pierre/Desktop/4D",
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/pierre/.cache/.fr-fffAcc/redbook_chapter_03_drawcommands/LoadShaders.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3219,
						"regions":
						{
						},
						"selection":
						[
							[
								517,
								517
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "headers/Main.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 286,
						"regions":
						{
						},
						"selection":
						[
							[
								207,
								207
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "sources/makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 467,
						"regions":
						{
						},
						"selection":
						[
							[
								334,
								334
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/Makefile/Makefile.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "shaders/shader.vertex",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 129,
						"regions":
						{
						},
						"selection":
						[
							[
								17,
								17
							]
						],
						"settings":
						{
							"auto_name": "#version 150",
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "shaders/shader.fragment",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 103,
						"regions":
						{
						},
						"selection":
						[
							[
								17,
								17
							]
						],
						"settings":
						{
							"auto_name": "#version 150",
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 100.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 501.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Desktop/SDL/02_getting_an_image_on_the_screen/02_getting_an_image_on_the_screen.sublime-workspace"
			]
		],
		"width": 381.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 152.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
